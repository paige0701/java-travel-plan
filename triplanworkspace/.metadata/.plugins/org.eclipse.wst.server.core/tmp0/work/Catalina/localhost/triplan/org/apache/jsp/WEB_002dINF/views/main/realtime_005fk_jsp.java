/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-07-07 02:08:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class realtime_005fk_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/triplanworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Triplan/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1463983535931L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- <html> -->\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \r\n");
      out.write("\"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<title>텍스트 스크롤</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("* {margin:0;padding:0;}\r\n");
      out.write("#scroll {height:30px;}\r\n");
      out.write("#show {color: white;}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("var count = 0;\r\n");
      out.write("\r\n");
      out.write("var real_search_keyword;\r\n");
      out.write("\r\n");
      out.write("function textScroll(scroll_el_id) {\r\n");
      out.write("    this.objElement = document.getElementById(scroll_el_id);\r\n");
      out.write("    this.objElement.style.position = 'relative';\r\n");
      out.write("    this.objElement.style.overflow = 'hidden';\r\n");
      out.write("\r\n");
      out.write("    this.objLi = this.objElement.getElementsByTagName('li');\r\n");
      out.write("    this.height = this.objElement.offsetHeight; // li 엘리먼트가 움직이는 높이(외부에서 변경가능)\r\n");
      out.write("    this.num = this.objLi.length; // li 엘리먼트의 총 갯수\r\n");
      out.write("    this.totalHeight = this.height*this.num; // 총 높이\r\n");
      out.write("    this.scrollspeed = 2; // 스크롤되는 px\r\n");
      out.write("    this.objTop = new Array(); // 각 li의 top 위치를 저장\r\n");
      out.write("    this.timer = null;\r\n");
      out.write("    \r\n");
      out.write("    for(var i=0; i<this.num; i++){\r\n");
      out.write("        this.objLi[i].style.position = 'absolute';\r\n");
      out.write("        this.objTop[i] = this.height*i;\r\n");
      out.write("        this.objLi[i].style.top = this.objTop[i]+\"px\";\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textScroll.prototype.move = function(){\r\n");
      out.write("    for(var i=0; i<this.num; i++) {\r\n");
      out.write("        this.objTop[i] = this.objTop[i] - this.scrollspeed;\r\n");
      out.write("        this.objLi[i].style.top = this.objTop[i]+\"px\";\r\n");
      out.write("    }\r\n");
      out.write("    if(this.objTop[0]%this.height == 0){\r\n");
      out.write("        this.jump();\r\n");
      out.write("        count++;\r\n");
      out.write("        if(count == 11)\r\n");
      out.write("        {\r\n");
      out.write("        \tcount = 0;\r\n");
      out.write("        \tgetsearchword();\r\n");
      out.write("        }\r\n");
      out.write("    }else{\r\n");
      out.write("        clearTimeout(this.timer);\r\n");
      out.write("        this.timer = setTimeout(this.name+\".move()\",49);\r\n");
      out.write("        this.name+\".move()\"\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textScroll.prototype.jump = function(){\r\n");
      out.write("    for(var i=0; i<this.num; i++){\r\n");
      out.write("        if(this.objTop[i] == this.height*(-2)){\r\n");
      out.write("            this.objTop[i] = this.objTop[i] + this.totalHeight;\r\n");
      out.write("            this.objLi[i].style.top = this.objTop[i]+\"px\";\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    clearTimeout(this.timer);\r\n");
      out.write("    this.timer = setTimeout(this.name+\".move()\",1000);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textScroll.prototype.start = function() {\r\n");
      out.write("    this.timer = setTimeout(this.name+\".move()\",1000);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("window.onload=function(){\r\n");
      out.write("\tgetsearchword();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getsearchword(){\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl:\"/triplan/mainrealtimeSearch.tp\",\r\n");
      out.write("\t\ttype:\"GET\",\r\n");
      out.write("\t\tdataType:\"html\", \r\n");
      out.write("    \tsuccess: function(data){\r\n");
      out.write("    \t\t   $(\"#scroll\").html(data);\r\n");
      out.write("    \t\t   real_search_keyword = new textScroll('scroll'); // 스크롤링 하고자하는 ul 엘리먼트의 id값을 인자로 넣습니다\r\n");
      out.write("    \t\t   real_search_keyword.name = \"real_search_keyword\"; // 인스턴스 네임을 등록합니다\r\n");
      out.write("    \t\t   real_search_keyword.start();\r\n");
      out.write("    \t }\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"search_kyu\">\r\n");
      out.write("\t\t");

		// 키값 : SEARCHEDWORD
		List<HashMap<String,String>> list = (List<HashMap<String,String>>)session.getAttribute("zlist");
		List<String> slist = new ArrayList<String>();
		
		
		
		if(list!=null)
		{
			for(HashMap<String,String> hash : list)
			{
				String searchword = hash.get("SEARCHEDWORD");
				slist.add(searchword);
			}
			
		}
		
		
		
      out.write("\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("<!-- li 엘리먼트들이 position:absolute 되므로 ul 엘리먼트에는 height 값이 있어야 합니다 --> \r\n");
      out.write("\r\n");
      out.write("<ul id=\"scroll\"></ul>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
